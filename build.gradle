plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'checkstyle'
}

checkstyle {
    toolVersion = '10.2'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.0'

    String javaFxVersion = '17.0.7'

    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = false
    }
}

application {
    mainClass.set("sumode.Launcher") //remember to change back
}

shadowJar {
    archiveFileName = "SumoDE.jar"
    archiveBaseName = "duke"
    archiveClassifier = null
}

run {
    standardInput = System.in
}

tasks.register('runProgram', JavaExec) {
    group = 'application'
    description = 'Run the program with input.txt'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('sumode.SumoDE')

    def inputFile = file('text-ui-test/input.txt')
    if (!inputFile.exists()) {
        throw new GradleException("input.txt not found in text-ui-test directory.")
    }
    standardInput = inputFile.newInputStream()

    def actualFile = file('text-ui-test/ACTUAL.TXT')

    // Clear ACTUAL.TXT before running the program
    if (actualFile.exists()) {
        actualFile.delete()
    }
    actualFile.createNewFile()

    // Redirect output to ACTUAL.TXT
    standardOutput = new FileOutputStream(actualFile)
    errorOutput = new FileOutputStream(actualFile)

    doLast {
        println "Program executed and output redirected to ACTUAL.TXT"
    }
}

tasks.register('compareOutput') {
    group = 'verification'
    description = 'Compare the output of the program with EXPECTED.TXT'
    dependsOn 'runProgram'
    doLast {
        def actualFile = file('text-ui-test/ACTUAL.TXT')
        def expectedFile = file('text-ui-test/EXPECTED.TXT')

        if (!actualFile.exists() || !expectedFile.exists()) {
            println "One or both files do not exist: ACTUAL.TXT or EXPECTED.TXT"
            println "Test failed."
            return
        }

        def actualLines = actualFile.readLines()
        def expectedLines = expectedFile.readLines()

        def differencesFound = false

        // Compare line by line and print differences
        actualLines.eachWithIndex { line, index ->
            if (index >= expectedLines.size()) {
                println "Extra line in ACTUAL.TXT at line ${index + 1}: ${line}"
                differencesFound = true
            } else if (line != expectedLines[index]) {
                println "Line ${index + 1} mismatch:"
                println "ACTUAL.TXT   : ${line}"
                println "EXPECTED.TXT : ${expectedLines[index]}"
                differencesFound = true
            }
        }

        // Handle case where expected file has extra lines
        if (expectedLines.size() > actualLines.size()) {
            expectedLines[actualLines.size()..-1].eachWithIndex { line, index ->
                println "Missing line in ACTUAL.TXT at line ${actualLines.size() + index + 1}: ${line}"
                differencesFound = true
            }
        }

        if (differencesFound) {
            println "Test failed."
        } else {
            println "Test passed successfully."
        }
    }
}



tasks.build {
    dependsOn 'test', 'shadowJar', 'compareOutput'  // Ensure the build process includes testing, packaging, and output comparison
}
